if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM=xterm-256color
fi

tput sgr0; # reset colors
bold=$(tput bold);
reset=$(tput sgr0);
electric_blue=$(tput setaf 33);
cyan=$(tput setaf 37);
white=$(tput setaf 15);
bright_yellow=$(tput setaf 190);
dark_grey=$(tput setaf 239)

function git_bits() {
	gitstatus=$(git status --untracked-files=all --porcelain --branch 2> /dev/null)
	[[ "$?" -ne 0 ]] && echo "" && return 0

	num_staged=0
	num_changed=0
	num_conflicts=0
	num_untracked=0
	while IFS='' read -r line || [[ -n "$line" ]]; do
		status=${line:0:2}
		while [[ -n $status ]]; do
			case "$status" in
				#two fixed character matches, loop finished
				\#\#) branch_line="${line/\.\.\./^}"; break ;;
				\?\?) ((num_untracked++)); break ;;
				U?) ((num_conflicts++)); break;;
				?U) ((num_conflicts++)); break;;
				DD) ((num_conflicts++)); break;;
				AA) ((num_conflicts++)); break;;
				#two character matches, first loop
				?M) ((num_changed++)) ;;
				?D) ((num_changed++)) ;;
				?\ ) ;;
				#single character matches, second loop
				U) ((num_conflicts++)) ;;
				\ ) ;;
				*) ((num_staged++)) ;;
			esac
			status=${status:0:(${#status}-1)}
		done
	done <<< "$gitstatus"

	clean=0
	if (( num_changed == 0 && num_staged == 0 && num_untracked == 0 && num_conflicts == 0)) ; then
		clean=1
	fi

	IFS="^" read -ra branch_fields <<< "${branch_line/\#\# }"
	branch="${branch_fields[0]}"
	remote=
	upstream=
	ahead=""
	behind=""

	if [[ "$branch" == *"Initial commit on"* ]]; then
		IFS=" " read -ra fields <<< "$branch"
		branch="${fields[3]}"
		remote="_NO_REMOTE_TRACKING_"
	elif [[ "$branch" == *"No commits yet on"* ]]; then
		IFS=" " read -ra fields <<< "$branch"
		branch="${fields[4]}"
		remote="_NO_REMOTE_TRACKING_"
	elif [[ "$branch" == *"no branch"* ]]; then
		tag=$( git describe --tags --exact-match )
		if [[ -n "$tag" ]]; then
			branch="$tag"
		else
			branch="_PREHASH_$( git rev-parse --short HEAD )"
		fi
	else
		if [[ "${#branch_fields[@]}" -eq 1 ]]; then
			remote="_NO_REMOTE_TRACKING_"
		else
			IFS="[,]" read -ra remote_fields <<< "${branch_fields[1]}"
			upstream="${remote_fields[0]}"
			for remote_field in "${remote_fields[@]}"; do
				if [[ "$remote_field" == "ahead "* ]]; then
					num_ahead=${remote_field:6}
					ahead="${num_ahead}"
				fi
				if [[ "$remote_field" == "behind "* ]] || [[ "$remote_field" == " behind "* ]]; then
					num_behind=${remote_field:7}
					behind="${num_behind# }"
				fi
			done
			remote="${behind}${ahead}"
		fi
	fi

	if [[ -z "$remote" ]] ; then
		remote='.'
	fi

	if [[ -z "$upstream" ]] ; then
		upstream='^'
	fi

	bits="${bold}${branch}${reset}${bright_yellow} "

	if [ "${behind}" != "" ] ; then
		bits="${bits}↓${behind}"
	fi

	if [ "${ahead}" != "" ] ; then
		bits="${bits}↑${ahead}"
	fi

	if [[ "${ahead}" != "" || "${behind}" != "" ]] ; then
		bits="${bits}${dark_grey}|${bright_yellow}"
	fi

	if [ $num_staged != 0 ] ; then
		bits="${bits}●${num_staged}"
	fi

	if [ $num_conflicts != 0 ] ; then
		bits="${bits}×${num_conflicts}"
	fi

	if [ $num_changed != 0 ] ; then
		bits="${bits}+${num_changed}"
	fi

	if [ $num_untracked != 0 ] ; then
		bits="${bits}…"
	fi

	if [ $clean != 0 ] ; then
		bits="${bits}✓"
	fi

	if [ ! "${bits}" == "" ]; then
		echo " ${dark_grey}[${bright_yellow}${bits}${dark_grey}]"
	else
		echo ""
	fi
}

export PS1="\[${electric_blue}\]\w\$(git_bits)\[${white}\]\n→ \[${reset}\]"
export PS2="\[${cyan}\]→ \[${reset}\]"
